/*
public class Solution {
    public int findPeakElement(int[] nums) {
        boolean pre, post;
        for(int i = 0; i<nums.length; i++){
            if(i==0){
                pre = true;
            }else{
                pre = nums[i]>nums[i-1]?true:false;
            }
            
            if(i==nums.length-1){
                post = true;
            } else{
                post = nums[i]>nums[i+1]?true:false;
            }
            
            if(pre && post){
                return i;
            }
        }
        return -1;
    }
}*/

public class Solution { 
    // Proof of the binary search approach: http://algorithm.yuanbin.me/binary_search/find_peak_element.html
    
    public int findPeakElement(int[] nums) {
        int left = 0;
        int right = nums.length-1;
        
        while(left<=right){
            int mid = (left+right)/2;
            
            if((mid==0 || nums[mid-1]<nums[mid]) && (mid==nums.length-1 || nums[mid+1]<nums[mid])){
                return mid;
            } else if(mid>0 && nums[mid-1]>nums[mid]){ 
                right = mid-1;
            } else if(mid<nums.length-1 && nums[mid+1]>nums[mid]){ // [3, 4]
                left = mid+1;
            }
        }
        return -1;
    }
}

public class Solution {
    public int findPeakElement(int[] nums) {
       return findPeakElement(nums, 0, nums.length-1);
    }
    
    private int findPeakElement(int[]nums, int left, int right){
        if(left>right) return -1;
        int mid = (left+right)/2;
        
        if((mid==0 || nums[mid-1]<nums[mid]) && (mid==nums.length-1 || nums[mid]>nums[mid+1])){
            return mid;
        } else if (mid>0 && nums[mid-1]>nums[mid]){
            return findPeakElement(nums, left, mid-1);
        } else if (mid<nums.length-1 && nums[mid+1]>nums[mid]){
            return findPeakElement(nums, mid+1, right);
        } else {
            return -1;
        }
    }
}
